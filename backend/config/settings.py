"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

import os
from dotenv import load_dotenv

load_dotenv()  # .env 파일 로드

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w-ggn-ypwx8$n)3tfw&_1^7)lk!s9nf3a#-bj3rzxtl7&ja0ji'


# AWS 설정 - .env 에서 불러오기
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'jung',  # DB 이름
        'USER': 'admin',  # MySQL 사용자 이름
        'PASSWORD': 'angksfnvm123!',  # 비밀번호
        'HOST': 'database-1.cfe6wsoa0qhr.ap-northeast-2.rds.amazonaws.com',
        'PORT': '3306',
    }
}


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    # 'django.contrib.auth',
    # 'django.contrib.contenttypes',
    # 'django.contrib.sessions', # 이거 사용해야한대요.. 이게 세션 즉, 쿠키-> 로그인했으면 로그인 정보 그대로 담아서 사용해야해서...
    # 'django.contrib.messages',
    # 'django.contrib.staticfiles',
]

# MIDDLEWARE = [
#     'corsheaders.middleware.CorsMiddleware',  # CORS 미들웨어, 가장 위에 있어야 함
    # 'django.middleware.security.SecurityMiddleware',  # 보안 미들웨어
    # 'django.contrib.sessions.middleware.SessionMiddleware',  # 세션 관리
    # 'django.middleware.common.CommonMiddleware',  # 공통 HTTP 동작
    # 'django.middleware.csrf.CsrfViewMiddleware',  # CSRF 보호 (운영 환경에서 권장)
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',  # 사용자 인증
    # 'django.contrib.messages.middleware.MessageMiddleware',  # Django 메시징 프레임워크
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 클릭재킹 보호
# ]
#위 두 개는 킵(django 제공 테이블 자동 생성 어쩌구)

INSTALLED_APPS = [
    'daphne',  # Django Channels 실행을 위한 Daphne 추가
    'django.contrib.admin',  # Django 기본 관리자 기능
    'django.contrib.auth',  # 사용자 인증 시스템
    'django.contrib.sessions',  # 세션 관리
    'django.contrib.contenttypes',  # 기본 앱
    'django.contrib.staticfiles',  # 정적 파일 관리
    'django.contrib.messages',#채팅 앱
    'rest_framework',  # Django REST Framework (필요 시)
    'corsheaders',  # CORS 설정
    'channels',  # 채팅 앱 Django Channels (WebSocket)
    'chat',  # 채팅 앱
    "gptapi", # GPT 사용
    'schedule',#스케줄 사용
    'tasks',
    'db_model',
    'comments',
    'file'
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 가장 위에 위치
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # 다른 기본 미들웨어가 필요 없다면 제거
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF 보호 (운영 환경에서 필수)
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # ✅ 채팅앱
    'django.contrib.messages.middleware.MessageMiddleware',  # ✅ 채팅앱 
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = False # ✅ UTC 대신 로컬 시간(KST) 사용


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_ORIGINS = False  # 개발 중에는 모든 도메인 허용
CORS_ALLOW_CREDENTIALS = True  # 쿠키 전송 허용
CORS_ALLOWED_ORIGINS = ['http://localhost:3000']  # React 서버 허용
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000']  # React 서버를 CSRF 신뢰 도메인으로 설정

# 세션 엔진 설정 (기본적으로 DB 세션 사용)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
# 쿠키 설정
SESSION_COOKIE_SAMESITE = 'None'  # Strict : 쿠키 제한 , Lax : 느슨 , None : 모두 허용  *해봤는데 None+True 조합일 때 되더라구요*
SESSION_COOKIE_SECURE = True     # HTTPS가 아니므로 False
SESSION_COOKIE_HTTPONLY = True    # JavaScript에서 쿠키 접근 불가
SESSION_SAVE_EVERY_REQUEST = True # 요청마다 세션 갱신
SESSION_COOKIE_AGE = 86400         # 세션 만료 시간 (단위 : 초) 하루로 늘림
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # 브라우저 종료 시 세션 종료
# CSRF_COOKIE_SECURE = False


#------------------------------------------------------------------------
#채팅 부분 설정 추가 2025-02-14 인우
#------------------------------------------------------------------------
ASGI_APPLICATION = 'config.asgi.application'  
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,  # 기본 페이지 크기 (limit 값)
}
#페이징 하려고 했지만, 정렬 과정에서 계속 정렬이 안되어서 나중으로 미뤄둠..
#------------------------------------------------------------------------